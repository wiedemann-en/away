/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Component, Input } from '@angular/core';
import { merge, partition, timer } from 'rxjs';
import { debounce, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { PendingRequestsInterceptor } from '../services/pending-requests-interceptor.service';
import { SpinnerVisibilityService } from '../services/spinner-visibility.service';
import { Spinkit } from '../spinkits';
export class NgHttpLoaderComponent {
    /**
     * @param {?} pendingRequestsInterceptor
     * @param {?} spinnerVisibility
     */
    constructor(pendingRequestsInterceptor, spinnerVisibility) {
        this.pendingRequestsInterceptor = pendingRequestsInterceptor;
        this.spinnerVisibility = spinnerVisibility;
        this.spinkit = Spinkit;
        this.visibleUntil = Date.now();
        this.backdrop = true;
        this.debounceDelay = 0;
        this.entryComponent = null;
        this.extraDuration = 0;
        this.filteredHeaders = [];
        this.filteredMethods = [];
        this.filteredUrlPatterns = [];
        this.minDuration = 0;
        this.opacity = '.7';
        this.spinner = Spinkit.skWave;
    }
    /**
     * @private
     * @return {?}
     */
    initIsvisibleObservable() {
        const [showSpinner$, hideSpinner$] = partition(this.pendingRequestsInterceptor.pendingRequestsStatus$, (/**
         * @param {?} h
         * @return {?}
         */
        h => h));
        this.isVisible$ = merge(this.pendingRequestsInterceptor.pendingRequestsStatus$
            .pipe(switchMap((/**
         * @return {?}
         */
        () => showSpinner$.pipe(debounce((/**
         * @return {?}
         */
        () => timer(this.debounceDelay))))))), showSpinner$
            .pipe(switchMap((/**
         * @return {?}
         */
        () => hideSpinner$.pipe(debounce((/**
         * @return {?}
         */
        () => this.getVisibilityTimer$())))))), this.spinnerVisibility.visibility$).pipe(distinctUntilChanged(), tap((/**
         * @param {?} h
         * @return {?}
         */
        h => this.updateExpirationDelay(h))));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initIsvisibleObservable();
        this.nullifySpinnerIfEntryComponentIsDefined();
        this.initFilters();
    }
    /**
     * @private
     * @return {?}
     */
    nullifySpinnerIfEntryComponentIsDefined() {
        if (this.entryComponent) {
            this.spinner = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initFilters() {
        this.initFilteredUrlPatterns();
        this.initFilteredMethods();
        this.initFilteredHeaders();
    }
    /**
     * @private
     * @return {?}
     */
    initFilteredUrlPatterns() {
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach((/**
             * @param {?} e
             * @return {?}
             */
            e => this.pendingRequestsInterceptor.filteredUrlPatterns.push(new RegExp(e))));
        }
    }
    /**
     * @private
     * @return {?}
     */
    initFilteredMethods() {
        if (!(this.filteredMethods instanceof Array)) {
            throw new TypeError('`filteredMethods` must be an array.');
        }
        this.pendingRequestsInterceptor.filteredMethods = this.filteredMethods;
    }
    /**
     * @private
     * @return {?}
     */
    initFilteredHeaders() {
        if (!(this.filteredHeaders instanceof Array)) {
            throw new TypeError('`filteredHeaders` must be an array.');
        }
        this.pendingRequestsInterceptor.filteredHeaders = this.filteredHeaders;
    }
    /**
     * @private
     * @param {?} showSpinner
     * @return {?}
     */
    updateExpirationDelay(showSpinner) {
        if (showSpinner) {
            this.visibleUntil = Date.now() + this.minDuration;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getVisibilityTimer$() {
        return timer(Math.max(this.extraDuration, this.visibleUntil - Date.now()));
    }
}
NgHttpLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-http-loader',
                template: "<div id=\"spinner\"\n     *ngIf=\"isVisible$ | async\"\n     [class.backdrop]=\"backdrop\"\n     [style.opacity]=\"opacity\">\n\n    <ng-container *ngComponentOutlet=\"entryComponent\"></ng-container>\n\n    <sk-cube-grid\n        *ngIf=\"spinner === spinkit.skCubeGrid\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-cube-grid>\n\n    <sk-chasing-dots\n        *ngIf=\"spinner === spinkit.skChasingDots\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-chasing-dots>\n\n    <sk-double-bounce\n        *ngIf=\"spinner === spinkit.skDoubleBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-double-bounce>\n\n    <sk-rotating-plane\n        *ngIf=\"spinner === spinkit.skRotatingPlane\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-rotating-plane>\n\n    <sk-spinner-pulse\n        *ngIf=\"spinner === spinkit.skSpinnerPulse\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-spinner-pulse>\n\n    <sk-three-bounce\n        *ngIf=\"spinner === spinkit.skThreeBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-three-bounce>\n\n    <sk-wandering-cubes\n        *ngIf=\"spinner === spinkit.skWanderingCubes\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wandering-cubes>\n\n    <sk-wave\n        *ngIf=\"spinner === spinkit.skWave\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wave>\n\n</div>\n\n",
                styles: ["#spinner{top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);position:fixed;z-index:9999}#spinner.backdrop{top:0;left:0;height:100%;width:100%;background-color:#f1f1f1;display:flex;align-items:center;justify-content:center;-webkit-transform:none;transform:none}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}"]
            }] }
];
/** @nocollapse */
NgHttpLoaderComponent.ctorParameters = () => [
    { type: PendingRequestsInterceptor },
    { type: SpinnerVisibilityService }
];
NgHttpLoaderComponent.propDecorators = {
    backdrop: [{ type: Input }],
    backgroundColor: [{ type: Input }],
    debounceDelay: [{ type: Input }],
    entryComponent: [{ type: Input }],
    extraDuration: [{ type: Input }],
    filteredHeaders: [{ type: Input }],
    filteredMethods: [{ type: Input }],
    filteredUrlPatterns: [{ type: Input }],
    minDuration: [{ type: Input }],
    opacity: [{ type: Input }],
    spinner: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinkit;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.isVisible$;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.visibleUntil;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.backdrop;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.backgroundColor;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.debounceDelay;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.entryComponent;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.extraDuration;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredHeaders;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredMethods;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredUrlPatterns;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.minDuration;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.opacity;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinner;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.pendingRequestsInterceptor;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.spinnerVisibility;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaHR0cC1sb2FkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctaHR0cC1sb2FkZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZy1odHRwLWxvYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBU0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLEtBQUssRUFBYyxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzlGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFPdEMsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7SUFrQjlCLFlBQW9CLDBCQUFzRCxFQUFVLGlCQUEyQztRQUEzRywrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTRCO1FBQVUsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQWhCeEgsWUFBTyxHQUFHLE9BQU8sQ0FBQztRQUVqQixpQkFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVsQixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBRWhCLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLG1CQUFjLEdBQVEsSUFBSSxDQUFDO1FBQzNCLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLG9CQUFlLEdBQWEsRUFBRSxDQUFDO1FBQy9CLG9CQUFlLEdBQWEsRUFBRSxDQUFDO1FBQy9CLHdCQUFtQixHQUFhLEVBQUUsQ0FBQztRQUNuQyxnQkFBVyxHQUFHLENBQUMsQ0FB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QUM5QyxJQUFJLFdBQVcsRUFBRTtZQUNiLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDckQ7SUFDTCxDQUFDOzs7OztJQUVPLG1CQUFtQjtRQUN2QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7OztZQTdGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsKzNDQUE4Qzs7YUFFakQ7Ozs7WUFSUSwwQkFBMEI7WUFDMUIsd0JBQXdCOzs7dUJBYzVCLEtBQUs7OEJBQ0wsS0FBSzs0QkFDTCxLQUFLOzZCQUNMLEtBQUs7NEJBQ0wsS0FBSzs4QkFDTCxLQUFLOzhCQUNMLEtBQUs7a0NBQ0wsS0FBSzswQkFDTCxLQUFLO3NCQUNMLEtBQUs7c0JBQ0wsS0FBSzs7OztJQWROLHdDQUF5Qjs7SUFDekIsMkNBQXVDOzs7OztJQUN2Qyw2Q0FBa0M7O0lBRWxDLHlDQUFnQzs7SUFDaEMsZ0RBQXdDOztJQUN4Qyw4Q0FBa0M7O0lBQ2xDLCtDQUEyQzs7SUFDM0MsOENBQWtDOztJQUNsQyxnREFBK0M7O0lBQy9DLGdEQUErQzs7SUFDL0Msb0RBQW1EOztJQUNuRCw0Q0FBZ0M7O0lBQ2hDLHdDQUErQjs7SUFDL0Isd0NBQXlDOzs7OztJQUU3QiwyREFBOEQ7Ozs7O0lBQUUsa0RBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgcGFydGl0aW9uLCB0aW1lciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2UsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFBlbmRpbmdSZXF1ZXN0c0ludGVyY2VwdG9yIH0gZnJvbSAnLi4vc2VydmljZXMvcGVuZGluZy1yZXF1ZXN0cy1pbnRlcmNlcHRvci5zZXJ2aWNlJztcbmltcG9ydCB7IFNwaW5uZXJWaXNpYmlsaXR5U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NwaW5uZXItdmlzaWJpbGl0eS5zZXJ2aWNlJztcbmltcG9ydCB7IFNwaW5raXQgfSBmcm9tICcuLi9zcGlua2l0cyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmctaHR0cC1sb2FkZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9uZy1odHRwLWxvYWRlci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vbmctaHR0cC1sb2FkZXIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0h0dHBMb2FkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgcHVibGljIHNwaW5raXQgPSBTcGlua2l0O1xuICAgIHB1YmxpYyBpc1Zpc2libGUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIHByaXZhdGUgdmlzaWJsZVVudGlsID0gRGF0ZS5ub3coKTtcblxuICAgIEBJbnB1dCgpIHB1YmxpYyBiYWNrZHJvcCA9IHRydWU7XG4gICAgQElucHV0KCkgcHVibGljIGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHB1YmxpYyBkZWJvdW5jZURlbGF5ID0gMDtcbiAgICBASW5wdXQoKSBwdWJsaWMgZW50cnlDb21wb25lbnQ6IGFueSA9IG51bGw7XG4gICAgQElucHV0KCkgcHVibGljIGV4dHJhRHVyYXRpb24gPSAwO1xuICAgIEBJbnB1dCgpIHB1YmxpYyBmaWx0ZXJlZEhlYWRlcnM6IHN0cmluZ1tdID0gW107XG4gICAgQElucHV0KCkgcHVibGljIGZpbHRlcmVkTWV0aG9kczogc3RyaW5nW10gPSBbXTtcbiAgICBASW5wdXQoKSBwdWJsaWMgZmlsdGVyZWRVcmxQYXR0ZXJuczogc3RyaW5nW10gPSBbXTtcbiAgICBASW5wdXQoKSBwdWJsaWMgbWluRHVyYXRpb24gPSAwO1xuICAgIEBJbnB1dCgpIHB1YmxpYyBvcGFjaXR5ID0gJy43JztcbiAgICBASW5wdXQoKSBwdWJsaWMgc3Bpbm5lciA9IFNwaW5raXQuc2tXYXZlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwZW5kaW5nUmVxdWVzdHNJbnRlcmNlcHRvcjogUGVuZGluZ1JlcXVlc3RzSW50ZXJjZXB0b3IsIHByaXZhdGUgc3Bpbm5lclZpc2liaWxpdHk6IFNwaW5uZXJWaXNpYmlsaXR5U2VydmljZSkge1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdElzdmlzaWJsZU9ic2VydmFibGUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IFtzaG93U3Bpbm5lciQsIGhpZGVTcGlubmVyJF0gPSBwYXJ0aXRpb24odGhpcy5wZW5kaW5nUmVxdWVzdHNJbnRlcmNlcHRvci5wZW5kaW5nUmVxdWVzdHNTdGF0dXMkLCBoID0+IGgpO1xuXG4gICAgICAgIHRoaXMuaXNWaXNpYmxlJCA9IG1lcmdlKFxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdHNJbnRlcmNlcHRvci5wZW5kaW5nUmVxdWVzdHNTdGF0dXMkXG4gICAgICAgICAgICAgICAgLnBpcGUoc3dpdGNoTWFwKCgpID0+IHNob3dTcGlubmVyJC5waXBlKGRlYm91bmNlKCgpID0+IHRpbWVyKHRoaXMuZGVib3VuY2VEZWxheSkpKSkpLFxuICAgICAgICAgICAgc2hvd1NwaW5uZXIkXG4gICAgICAgICAgICAgICAgLnBpcGUoc3dpdGNoTWFwKCgpID0+IGhpZGVTcGlubmVyJC5waXBlKGRlYm91bmNlKCgpID0+IHRoaXMuZ2V0VmlzaWJpbGl0eVRpbWVyJCgpKSkpKSxcbiAgICAgICAgICAgIHRoaXMuc3Bpbm5lclZpc2liaWxpdHkudmlzaWJpbGl0eSQsXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICB0YXAoaCA9PiB0aGlzLnVwZGF0ZUV4cGlyYXRpb25EZWxheShoKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaW5pdElzdmlzaWJsZU9ic2VydmFibGUoKTtcbiAgICAgICAgdGhpcy5udWxsaWZ5U3Bpbm5lcklmRW50cnlDb21wb25lbnRJc0RlZmluZWQoKTtcbiAgICAgICAgdGhpcy5pbml0RmlsdGVycygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbnVsbGlmeVNwaW5uZXJJZkVudHJ5Q29tcG9uZW50SXNEZWZpbmVkKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5lbnRyeUNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5zcGlubmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEZpbHRlcnMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaW5pdEZpbHRlcmVkVXJsUGF0dGVybnMoKTtcbiAgICAgICAgdGhpcy5pbml0RmlsdGVyZWRNZXRob2RzKCk7XG4gICAgICAgIHRoaXMuaW5pdEZpbHRlcmVkSGVhZGVycygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEZpbHRlcmVkVXJsUGF0dGVybnMoKTogdm9pZCB7XG4gICAgICAgIGlmICghKHRoaXMuZmlsdGVyZWRVcmxQYXR0ZXJucyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGZpbHRlcmVkVXJsUGF0dGVybnNgIG11c3QgYmUgYW4gYXJyYXkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISF0aGlzLmZpbHRlcmVkVXJsUGF0dGVybnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlcmVkVXJsUGF0dGVybnMuZm9yRWFjaChlID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdHNJbnRlcmNlcHRvci5maWx0ZXJlZFVybFBhdHRlcm5zLnB1c2gobmV3IFJlZ0V4cChlKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRGaWx0ZXJlZE1ldGhvZHMoKTogdm9pZCB7XG4gICAgICAgIGlmICghKHRoaXMuZmlsdGVyZWRNZXRob2RzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgZmlsdGVyZWRNZXRob2RzYCBtdXN0IGJlIGFuIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzSW50ZXJjZXB0b3IuZmlsdGVyZWRNZXRob2RzID0gdGhpcy5maWx0ZXJlZE1ldGhvZHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0RmlsdGVyZWRIZWFkZXJzKCk6IHZvaWQge1xuICAgICAgICBpZiAoISh0aGlzLmZpbHRlcmVkSGVhZGVycyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGZpbHRlcmVkSGVhZGVyc2AgbXVzdCBiZSBhbiBhcnJheS4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0c0ludGVyY2VwdG9yLmZpbHRlcmVkSGVhZGVycyA9IHRoaXMuZmlsdGVyZWRIZWFkZXJzO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlRXhwaXJhdGlvbkRlbGF5KHNob3dTcGlubmVyOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChzaG93U3Bpbm5lcikge1xuICAgICAgICAgICAgdGhpcy52aXNpYmxlVW50aWwgPSBEYXRlLm5vdygpICsgdGhpcy5taW5EdXJhdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VmlzaWJpbGl0eVRpbWVyJCgpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgICAgICByZXR1cm4gdGltZXIoTWF0aC5tYXgodGhpcy5leHRyYUR1cmF0aW9uLCB0aGlzLnZpc2libGVVbnRpbCAtIERhdGUubm93KCkpKTtcbiAgICB9XG59XG4iXX0=