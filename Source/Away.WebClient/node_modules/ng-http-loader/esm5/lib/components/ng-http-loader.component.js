/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Component, Input } from '@angular/core';
import { merge, partition, timer } from 'rxjs';
import { debounce, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { PendingRequestsInterceptor } from '../services/pending-requests-interceptor.service';
import { SpinnerVisibilityService } from '../services/spinner-visibility.service';
import { Spinkit } from '../spinkits';
var NgHttpLoaderComponent = /** @class */ (function () {
    function NgHttpLoaderComponent(pendingRequestsInterceptor, spinnerVisibility) {
        this.pendingRequestsInterceptor = pendingRequestsInterceptor;
        this.spinnerVisibility = spinnerVisibility;
        this.spinkit = Spinkit;
        this.visibleUntil = Date.now();
        this.backdrop = true;
        this.debounceDelay = 0;
        this.entryComponent = null;
        this.extraDuration = 0;
        this.filteredHeaders = [];
        this.filteredMethods = [];
        this.filteredUrlPatterns = [];
        this.minDuration = 0;
        this.opacity = '.7';
        this.spinner = Spinkit.skWave;
    }
    /**
     * @private
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.initIsvisibleObservable = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = tslib_1.__read(partition(this.pendingRequestsInterceptor.pendingRequestsStatus$, (/**
         * @param {?} h
         * @return {?}
         */
        function (h) { return h; })), 2), showSpinner$ = _a[0], hideSpinner$ = _a[1];
        this.isVisible$ = merge(this.pendingRequestsInterceptor.pendingRequestsStatus$
            .pipe(switchMap((/**
         * @return {?}
         */
        function () { return showSpinner$.pipe(debounce((/**
         * @return {?}
         */
        function () { return timer(_this.debounceDelay); }))); }))), showSpinner$
            .pipe(switchMap((/**
         * @return {?}
         */
        function () { return hideSpinner$.pipe(debounce((/**
         * @return {?}
         */
        function () { return _this.getVisibilityTimer$(); }))); }))), this.spinnerVisibility.visibility$).pipe(distinctUntilChanged(), tap((/**
         * @param {?} h
         * @return {?}
         */
        function (h) { return _this.updateExpirationDelay(h); })));
    };
    /**
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initIsvisibleObservable();
        this.nullifySpinnerIfEntryComponentIsDefined();
        this.initFilters();
    };
    /**
     * @private
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.nullifySpinnerIfEntryComponentIsDefined = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.entryComponent) {
            this.spinner = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.initFilters = /**
     * @private
     * @return {?}
     */
    function () {
        this.initFilteredUrlPatterns();
        this.initFilteredMethods();
        this.initFilteredHeaders();
    };
    /**
     * @private
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.initFilteredUrlPatterns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                return _this.pendingRequestsInterceptor.filteredUrlPatterns.push(new RegExp(e));
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.initFilteredMethods = /**
     * @private
     * @return {?}
     */
    function () {
        if (!(this.filteredMethods instanceof Array)) {
            throw new TypeError('`filteredMethods` must be an array.');
        }
        this.pendingRequestsInterceptor.filteredMethods = this.filteredMethods;
    };
    /**
     * @private
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.initFilteredHeaders = /**
     * @private
     * @return {?}
     */
    function () {
        if (!(this.filteredHeaders instanceof Array)) {
            throw new TypeError('`filteredHeaders` must be an array.');
        }
        this.pendingRequestsInterceptor.filteredHeaders = this.filteredHeaders;
    };
    /**
     * @private
     * @param {?} showSpinner
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.updateExpirationDelay = /**
     * @private
     * @param {?} showSpinner
     * @return {?}
     */
    function (showSpinner) {
        if (showSpinner) {
            this.visibleUntil = Date.now() + this.minDuration;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgHttpLoaderComponent.prototype.getVisibilityTimer$ = /**
     * @private
     * @return {?}
     */
    function () {
        return timer(Math.max(this.extraDuration, this.visibleUntil - Date.now()));
    };
    NgHttpLoaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-http-loader',
                    template: "<div id=\"spinner\"\n     *ngIf=\"isVisible$ | async\"\n     [class.backdrop]=\"backdrop\"\n     [style.opacity]=\"opacity\">\n\n    <ng-container *ngComponentOutlet=\"entryComponent\"></ng-container>\n\n    <sk-cube-grid\n        *ngIf=\"spinner === spinkit.skCubeGrid\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-cube-grid>\n\n    <sk-chasing-dots\n        *ngIf=\"spinner === spinkit.skChasingDots\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-chasing-dots>\n\n    <sk-double-bounce\n        *ngIf=\"spinner === spinkit.skDoubleBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-double-bounce>\n\n    <sk-rotating-plane\n        *ngIf=\"spinner === spinkit.skRotatingPlane\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-rotating-plane>\n\n    <sk-spinner-pulse\n        *ngIf=\"spinner === spinkit.skSpinnerPulse\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-spinner-pulse>\n\n    <sk-three-bounce\n        *ngIf=\"spinner === spinkit.skThreeBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-three-bounce>\n\n    <sk-wandering-cubes\n        *ngIf=\"spinner === spinkit.skWanderingCubes\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wandering-cubes>\n\n    <sk-wave\n        *ngIf=\"spinner === spinkit.skWave\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wave>\n\n</div>\n\n",
                    styles: ["#spinner{top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);position:fixed;z-index:9999}#spinner.backdrop{top:0;left:0;height:100%;width:100%;background-color:#f1f1f1;display:flex;align-items:center;justify-content:center;-webkit-transform:none;transform:none}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}"]
                }] }
    ];
    /** @nocollapse */
    NgHttpLoaderComponent.ctorParameters = function () { return [
        { type: PendingRequestsInterceptor },
        { type: SpinnerVisibilityService }
    ]; };
    NgHttpLoaderComponent.propDecorators = {
        backdrop: [{ type: Input }],
        backgroundColor: [{ type: Input }],
        debounceDelay: [{ type: Input }],
        entryComponent: [{ type: Input }],
        extraDuration: [{ type: Input }],
        filteredHeaders: [{ type: Input }],
        filteredMethods: [{ type: Input }],
        filteredUrlPatterns: [{ type: Input }],
        minDuration: [{ type: Input }],
        opacity: [{ type: Input }],
        spinner: [{ type: Input }]
    };
    return NgHttpLoaderComponent;
}());
export { NgHttpLoaderComponent };
if (false) {
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinkit;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.isVisible$;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.visibleUntil;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.backdrop;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.backgroundColor;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.debounceDelay;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.entryComponent;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.extraDuration;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredHeaders;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredMethods;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredUrlPatterns;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.minDuration;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.opacity;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinner;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.pendingRequestsInterceptor;
    /**
     * @type {?}
     * @private
     */
    NgHttpLoaderComponent.prototype.spinnerVisibility;
}
//# sourceMappingURL=data:application/json;base64,