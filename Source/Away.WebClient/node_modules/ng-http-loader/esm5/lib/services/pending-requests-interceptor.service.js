/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
var PendingRequestsInterceptor = /** @class */ (function () {
    function PendingRequestsInterceptor() {
        this._pendingRequests = 0;
        this._pendingRequestsStatus$ = new ReplaySubject(1);
        this._filteredUrlPatterns = [];
        this._filteredMethods = [];
        this._filteredHeaders = [];
    }
    Object.defineProperty(PendingRequestsInterceptor.prototype, "pendingRequestsStatus$", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pendingRequestsStatus$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingRequestsInterceptor.prototype, "pendingRequests", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pendingRequests;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingRequestsInterceptor.prototype, "filteredUrlPatterns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filteredUrlPatterns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingRequestsInterceptor.prototype, "filteredMethods", {
        set: /**
         * @param {?} httpMethods
         * @return {?}
         */
        function (httpMethods) {
            this._filteredMethods = httpMethods;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingRequestsInterceptor.prototype, "filteredHeaders", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteredHeaders = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingRequestsInterceptor.prototype, "forceByPass", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._forceByPass = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    PendingRequestsInterceptor.prototype.shouldBypassUrl = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this._filteredUrlPatterns.some((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return e.test(url);
        }));
    };
    /**
     * @private
     * @param {?} req
     * @return {?}
     */
    PendingRequestsInterceptor.prototype.shouldBypassMethod = /**
     * @private
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this._filteredMethods.some((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return e.toUpperCase() === req.method.toUpperCase();
        }));
    };
    /**
     * @private
     * @param {?} req
     * @return {?}
     */
    PendingRequestsInterceptor.prototype.shouldBypassHeader = /**
     * @private
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this._filteredHeaders.some((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return req.headers.has(e);
        }));
    };
    /**
     * @private
     * @param {?} req
     * @return {?}
     */
    PendingRequestsInterceptor.prototype.shouldBypass = /**
     * @private
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this._forceByPass
            || this.shouldBypassUrl(req.urlWithParams)
            || this.shouldBypassMethod(req)
            || this.shouldBypassHeader(req);
    };
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    PendingRequestsInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        /** @type {?} */
        var shouldBypass = this.shouldBypass(req);
        if (!shouldBypass) {
            this._pendingRequests++;
            if (1 === this._pendingRequests) {
                this._pendingRequestsStatus$.next(true);
            }
        }
        return next.handle(req).pipe(finalize((/**
         * @return {?}
         */
        function () {
            if (!shouldBypass) {
                _this._pendingRequests--;
                if (0 === _this._pendingRequests) {
                    _this._pendingRequestsStatus$.next(false);
                }
            }
        })));
    };
    PendingRequestsInterceptor.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ PendingRequestsInterceptor.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PendingRequestsInterceptor_Factory() { return new PendingRequestsInterceptor(); }, token: PendingRequestsInterceptor, providedIn: "root" });
    return PendingRequestsInterceptor;
}());
export { PendingRequestsInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PendingRequestsInterceptor.prototype._pendingRequests;
    /**
     * @type {?}
     * @private
     */
    PendingRequestsInterceptor.prototype._pendingRequestsStatus$;
    /**
     * @type {?}
     * @private
     */
    PendingRequestsInterceptor.prototype._filteredUrlPatterns;
    /**
     * @type {?}
     * @private
     */
    PendingRequestsInterceptor.prototype._filteredMethods;
    /**
     * @type {?}
     * @private
     */
    PendingRequestsInterceptor.prototype._filteredHeaders;
    /**
     * @type {?}
     * @private
     */
    PendingRequestsInterceptor.prototype._forceByPass;
}
/** @type {?} */
export var PendingRequestsInterceptorProvider = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: PendingRequestsInterceptor,
        multi: true
    }];
//# sourceMappingURL=data:application/json;base64,